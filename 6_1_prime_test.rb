# Програма для перевірки, чи дане число є простим.
# використовується решето Ерастрофена з оптимізацією
# Оптимізація полягає в початку висіювання наступного
# не викресленого числа з його квадрату.

# Ви маєте зреалізувати логіку для формування масиву-шерета,
# його просіювання та виведення інформації, чи вказане число є простим.

class Calculator
  attr_accessor :sieve

  # створити масив з n чисел,де n - число,
  # яке ми хочемо перевірити на простоту
  def setup_prime n
    @sieve = []
    # тут маємо записати у масив числа від 2 до n
    # числа мають мати відповідні індекси
    # наприклад seive[10] => 10
    @sieve =[nil,nil,*2..n]
    return @sieve
  end

  # дана функція отримує на вхід непросіджений масив
  # на виході отримуємо масив, який містить тільки прості числа
  # на діапазоні від 2 до вказаного числа n
  def sieve_prime_upto n
   
    @sieve = setup_prime n
    # почергово проходимось по всіх елементах масиву
    for i in 2..Math.sqrt(n)
      # принагідно перевіряємо, чи поточний елемент вже не позначений
      # якщо він позначений, можемо перейти на наступний крок циклу
      next unless @sieve[i]
      # якщо елемент не позначений, то починаючи від його квадрату
      # помічаємо всі кратні йому елементи в масиві
      (i*i).step(n,i) {|j| @sieve[j]=nil}
    end

    # забрати всі позначені елементи з масиву @sieve
    # за допомогою функції compact
    @sieve.compact
    return @sieve
  end

  # основна функція, яка формує масив, просіює його члени та виводить результат
  # на вході отримує число - яке ми перевірятимемо
  # на виході має повернути true - якщо число просте,
  # або false у іншому випадку.
  def sieve_prime n
    a=sieve_prime_upto n
    if a[-1] == n
        return true
    else
        return false
    end
  end
    puts "Доброго дня,для перевірки введіть натуральне число >1"
    n = gets.chomp.to_i
    b = sieve_prime n
    if b == true
        puts "Просте число"
    else
        puts "Складене число"
    end
   
end